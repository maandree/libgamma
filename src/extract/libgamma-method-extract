#!/usr/bin/env python3
# -*- python -*-

# libgamma -- Display server abstraction layer for gamma ramp adjustments
# Copyright (C) 2014  Mattias Andr√©e (maandree@member.fsf.org)
# 
# This library is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os

with open(os.path.dirname(sys.argv[0]) + '/../lib/libgamma-method.h', 'rb') as file:
    data = file.read()
data = data.decode('utf-8', 'error')


def list_define(prefix, *blacklist):
    global data
    test1 = lambda line : line.startswith('#define ' + prefix)
    test2 = lambda line : line.split(' ')[1] not in [prefix + b for b in list(blacklist)]
    test3 = lambda line : not line.endswith('_H')
    defs = [line for line in data.split('\n') if test1(line) and test2(line) and test3(line)]
    print('\n'.join([d.split(' ')[1] for d in defs]))

def list_enum(prefix, *blacklist):
    global data
    test1 = lambda line : line.strip().startswith(prefix)
    test2 = lambda line : line.split(' ')[1] not in [prefix + b for b in list(blacklist)]
    defs = [line for line in data.split('\n') if test1(line) and test2(line)]
    print('\n'.join([d.strip().split(' ')[0].rstrip(',') for d in defs]))

def list_struct(name):
    global data
    data = data[data.find('\ntypedef struct ' + name + '\n'):]
    data = data[:data.find('\n}')]
    test1 = lambda line : line.startswith('  ') and line.endswith(';')
    test2 = lambda line : ' * ' not in line
    defs = [line for line in data.split('\n') if test1(line) and test2(line)]
    print('\n'.join([d.strip().split(' : ')[0].split(' ')[-1].rstrip(';') for d in defs]))


def type_struct(name):
    global data
    data = data[data.find('\ntypedef struct ' + name + '\n'):]
    data = data[:data.find('\n}')]
    test1 = lambda line : line.startswith('  ')
    test2 = lambda line : ' * ' not in line
    test3 = lambda line : line.strip().split(' : ')[0].split(' ')[-1].rstrip(';') == sys.argv[3]
    defs = [line for line in data.split('\n') if test1(line) and test2(line) and test3(line)]
    line = defs[0].strip().rstrip(';')
    if ' : ' in line:
        line = line.split(' : ')
        line[0] = ' '.join(line[0].split(' ')[:-1])
        print(':'.join(line))
    else:
        print(' '.join(line.split(' ')[:-1]))


def doc_typedef(name):
    global data
    data = data[:data.find('\ntypedef ' + name + '\n'):]
    data = data[:data.rfind('\n */')]
    data = data[data.rfind('/**\n') + len('/**\n'):]
    data = [line[3:] for line in data.split('\n')]
    print('\n'.join(data))


def doc_define():
    global data
    data = data[:data.find('\n#define ' + sys.argv[2] + ' ')]
    data = data[:data.rfind('\n */')]
    data = data[data.rfind('/**\n') + len('/**\n'):]
    data = [line[3:] for line in data.split('\n')]
    print('\n'.join(data))

def doc_enum():
    global data
    while '\n ' in data:
        data = data.replace('\n ', '\n')
    data = data[:data.find('\n' + sys.argv[2])]
    data = data[:data.rfind('\n*/')]
    data = data[data.rfind('/**\n') + len('/**\n'):]
    data = [line[2:] for line in data.split('\n')]
    print('\n'.join(data))

def doc_struct(name):
    global data
    data = data[data.find('\ntypedef struct ' + name + '\n'):]
    data = data[:data.find('\n}')]
    test1 = lambda line : line.startswith('  ')
    test2 = lambda line : ' * ' not in line
    test3 = lambda line : line.strip().split(' : ')[0].split(' ')[-1].rstrip(';') == sys.argv[2]
    defs = [line for line in data.split('\n') if test1(line) and test2(line) and test3(line)]
    line = defs[0]
    data = data[:data.find('\n' + line)]
    while '\n ' in data:
        data = data.replace('\n ', '\n')
    data = data[:data.rfind('\n*/')]
    data = data[data.rfind('/**\n') + len('/**\n'):]
    data = [line[2:] for line in data.split('\n')]
    print('\n'.join(data))


struct_map = {'--info-t' : 'libgamma_crtc_information',
              '--cap-t'  : 'libgamma_method_capabilities',
              '--site-t' : 'libgamma_site_state',
              '--part-t' : 'libgamma_partition_state',
              '--crtc-t' : 'libgamma_crtc_state'}

if sys.argv[1] == '--list':
    if sys.argv[2] == '--method':       list_define('LIBGAMMA_METHOD_', 'MAX', 'COUNT')
    elif sys.argv[2] == '--info':       list_define('LIBGAMMA_CRTC_INFO_', 'COUNT')
    elif sys.argv[2] == '--connector':  list_enum('LIBGAMMA_CONNECTOR_TYPE_', 'COUNT')
    elif sys.argv[2] == '--subpixel':   list_enum('LIBGAMMA_SUBPIXEL_ORDER_', 'COUNT')
    elif sys.argv[2] in struct_map:     list_struct(struct_map[sys.argv[2]])
elif sys.argv[1] == '--type':
    if sys.argv[2] in struct_map:       type_struct(struct_map[sys.argv[2]])
elif sys.argv[1] == '--doc':
    if sys.argv[2] in struct_map:       doc_typedef('struct ' + struct_map[sys.argv[2]])
else:
    if sys.argv[1] in ('--method', '--info'):           doc_define()
    elif sys.argv[1] in ('--connector', '--subpixel'):  doc_enum()
    elif sys.argv[1] in struct_map:     doc_struct(struct_map[sys.argv[1]])

